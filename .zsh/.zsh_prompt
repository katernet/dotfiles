# Prompt
PS1='%n@%m %F{green}%(5~|%-1~/…/%2~|%4~)%f $(git_prompt_info)%(?.%#.%{$fg_bold[red]%}%#%{$reset_color%}) '

# Right prompt
preexec() {
	if [ $RPROMPT_CMDTIME = 1 ]; then
		zmodload zsh/datetime # Load datetime for EPOCH vars
		timer=${timer:-$EPOCHSECONDS}
	elif [ $RPROMPT_EXIT = 1 ]; then
		exec=1
	fi
}

precmd() {
	local exitcode=$? # Exit code
	if [ $RPROMPT_CMDTIME = 1 ]; then
		if [ $timer ]; then
			timer_show=$(($EPOCHREALTIME - $timer))
			timer_show_dec=$(printf '%.*f\n' 1 $timer_show) # 1 decimal
			if [ $RPROMPT_EXIT = 1 ]; then
				if [ $exitcode -gt 0 ]; then
					RPS1="%{$fg_bold[red]%}◀ %{$reset_color%}[%{$fg_bold[red]%}%?%{$reset_color%}] ${timer_show_dec}s"
				else
					RPS1="%F{green}▷ %f${timer_show_dec}s"
				fi
			else
				RPS1="${timer_show_dec}s"
			fi
			unset timer
		fi
	elif [ $RPROMPT_EXIT = 1 ]; then
		if [ $exitcode -gt 0 ]; then
			RPS1="%{$fg_bold[red]%}◀ %{$reset_color%}[%{$fg_bold[red]%}%?%{$reset_color%}]"
		else
			if [ ! -z $exec ]; then # Prevents rprompt at login
				RPS1="%F{green}▷%f"
			else
				RPS1=""
			fi
		fi
	fi
	print -Pn "\e]2;%n@%m: %15<…<%~%<<\a"   # Window title
	print -Pn "\e]1;%15<…<%~%<<\a"          # Tab title
}

# Set git prompt formatting
GIT_PROMPT_PREFIX="\ue725 %{$fg_bold[red]%}"
GIT_PROMPT_SUFFIX="%{$reset_color%} "
GIT_PROMPT_DIRTY="%{$fg[red]%}✘"
GIT_PROMPT_CLEAN="%{$fg[green]%}✔"
GIT_PROMPT_ADDED="%{$fg[yellow]%}✚"
GIT_PROMPT_UNMERGED="%{$fg[white]%}§"

# Checks status of working tree
function git_status() {
	local STATUS=$(git status --porcelain 2>/dev/null)
	if $(echo "$STATUS" | grep '^A ' &> /dev/null); then
		echo "$GIT_PROMPT_ADDED"
	elif $(echo "$STATUS" | grep '^M ' &> /dev/null); then
		echo "$GIT_PROMPT_ADDED"
	elif $(echo "$STATUS" | grep '^MM ' &> /dev/null); then
		echo "$GIT_PROMPT_ADDED"
	elif $(echo "$STATUS" | grep '^U ' &>/dev/null); then
		echo "$GIT_PROMPT_UNMERGED"
	elif [[ -n "$STATUS" ]]; then
		echo "$GIT_PROMPT_DIRTY"
	else
		echo "$GIT_PROMPT_CLEAN"
	fi
}

# Output git branch info into prompt
function git_prompt_info() {
        [[ $UID = 0 ]] && return 0 # No git prompt for root user
        local ref
	ref=$(git symbolic-ref HEAD 2>/dev/null) || return 0
        echo "$GIT_PROMPT_PREFIX${ref#refs/heads/} $(git_status)$GIT_PROMPT_SUFFIX"
}

# Custom syntax highlighting
ZSH_HIGHLIGHT_STYLES[globbing]=fg=99 		# SlateBlue1
ZSH_HIGHLIGHT_STYLES[history-expansion]=fg=99
zle_highlight+=(paste:none) 			# Disable paste highlighting
